An Agilist in the Rough

Those of us that practice Agile can't always work on Agile projects. The idealists among us would say that one should hold out for the perfect workplace, where everybody is in the same location. In reality, this would rule out great opportunities. Not all great projects are at start-ups where everybody is in the same location. Some great opportunities are at large companies or have employees distributed globally. If you choose to follow an opportunity on a project that does not practice Agile, there is still hope. Any process can be improved and the journey of making a process better can be an exciting learning experience. The skills that you have learned on Agile projects should not go to waste because they can be a model for where your new project would thrive. A good approach for this is to list each of the friction points within your current process and try to figure out how Agile could be applied to make the process better. 


Agile in it's purest form 

Honesty is important in an Agile team. We are not honest when we commit to take on more then we can complete. We are not honest when we fail to point out a co-contributors flawed judgment. Daily stand-up and retrospective meetings are there to get the team talking and air out anything that may be in the way of success; even if it is not easy to admit. Honesty is the first step in real shared responsibility. Once you don't feel the need to keep anything from your team, there is nowhere for problems to hide. A team needs to make decisions together. In Agile, we trust that the team unit will manage the workflow within a sprint instead of being dependent on one person to make decisions. 

The rhythm of an Agile project could be it's most marketable attribute. Teams will get accustomed to cycles of sprints and over time, their throughput becomes more predictable. Massive project plans with Ghant charts are not suited to predicting the throughput of creative projects and have been letting businesses down for years. When I have talked to people who have successfully sold Agile to a business, it was on the point that Agile projects are iterative and though you cant expect to have the project complete on a specific date in 6 months, you can rely on their being a working product in some form at the end of every two week sprint. What is built is determined by what is most important for the business to get at the end of the two weeks. You can't control how much time it will take to create but you can control the order in which the creators take on tasks. Businesses who embrace this will love the results they get from Agile. 

Since we software people are creators we need a creative environment. Some of us can't avoid working in a massive cube farm, but that does not have to keep teams from being creative. The flexibility of an Agile project goes a long way in reaching level of creativity needed for success. We all encounter things while developing that are unforeseen in planning. The realization that this can be an opportunity instead of a set back was the first step in me falling in love with Agile. I was working on a new feature. I talked to the designers and product owners and thought I had a pretty good idea of what everybody was expecting. I spent some of my free time prototyping in an attempt to flush out some of the unknowns and was confident that I would be going into my next sprint with every hour accounted. Towards the end of the sprint, I noticed that a component was not behaving as expected and started to worry that resolving this issue would require more hours to fix then I had time. I spent hours that night researching and spinning my wheels with solution after solution. Each attempt to fix the problem was worse then the last because I was tired and stressed. When I came into work the next day and talked to my manager about the issue developing my feature, he simply instructed me to bring up my issue at the stand-up meeting. In the meeting, and as a team, we decided that this feature was not critical to launch. We decided to move forward developing other features and the troubled feature was moved to our backlog as a spike, meaning that the feature required more research. If it had been an important feature, we would have removed other features from the sprint to make room for the time that this issue would take to fix. Suddenly, I went from an unsustainable situation where an indefinite amount of new work was being added to my already committed development sprint. I went from feeling like I was going to fail to feeling creative again. I don't think the project team ever ended up prioritizing this feature to be built, but the immediate release was delivered in high quality. 

The freedom to change and reposition requirements is what makes a team agile and really freaks out the business at first. You will notice most hybrid processes that people come up with are intended to avoid allowing this flexibility. A lot of people think that a team will use up as much time as they have and never create any extra feature, only take more and more time until the project fails. Assuming a team is staffed well this should not be the case in an Agile team. Agile manages to remove a lot of the friction of software development and create an environment where developers can have fun. We gather around a scrum board in the morning and share stories about the day before and ask for help when we need some. This board shows, at a glance, our progress and it has been customized with little pithy quotes and funny drawings. When we commit to something on this board we don't want it to fail. The team feel a sense of ownership for this board and we want it to display a successful project. We see people from other areas stopping to glance at our board and read the quotes and giggle at the humor then scratch their heads trying to make sense of the cards and burn-down chart. We are proud of this project and this board and that is the only incentive we need to make it a success. 


Successful agile teams all buy in to a process 

 Joining a team that doesn't know or is resistant to Agile can feel like jumping in a pool after the Jacuzzi. You see people spending hours planning and committing to every hour that that will be working in the next two months. You are given hard deliverables like mockups and copy that are not intended to ever change. It is evident right away that it is not possible but the team accepts the task because it appears that they have no choice. Things will get done at the end of the sprint but mostly because the team all decided to work together to pull off a miracle. They worked all night and negotiated with the business to extend the time or change requirements. When you think of the amount of teamwork that goes into making a waterfall project appear successful, it is a shame the effort went into politics and not the software. The most important thing is to make sure that team is still pulling together to make the project a success and that means that you, the agile snob, need to be involved. You can not be resistant simply because you know a better way because agile requires the team to be a unit and the team will simply not follow you at this point. The truth is that your teammates may have already invested hours making tweaks to this process to bring it where it is with the company’s political environment in mind. There are a lot of valuable lessons already learned in your teams current process and a brand new agile process would fail without them. So you need to commit to the existing environment and learn how to do it as well as possible before you can suggest change. 

Some say that Agile is not the right tool for all projects. Packaged software and DB administration cannot be done iteratively. I could go out on a limb and say that Agile can be used anywhere, in some form, but honestly specific disciplines like Scrum and XP are specifically designed for development of large web applications and will not always be ideal for other types of projects. 

Larger projects can be especially difficult to convert to Agile. Projects where their are teams whose members are, sometimes a world away, are common in large companies. Tools like the scrum-board, are only effective when a team is in the same location. Creative solutions need to be developed to bridge the gap between time zones and cultures to create the camaraderie you need for a successful unit. I honestly think that the most successful teams will be in the same room every morning for a stand-up meeting, and you will compromise a little bit with every constraint. It is up to the business to balance the varying degrees of value in having a distributed team against the efficiency of a unit. Regardless of what the business decides we have to make it work and I have seen some great efforts to bridge the gap. In my current role, our two distributed teams meet after every successful launch in one of our cities and share a lunch. We also have a simple online tool that provides us with a focus of progress. This is like our scrum-board but it obviously does not provide the personal connection. We can see our teammates progress at a glance and the interface makes it simple to update our status for all to see. 

Some important players in the waterfall process are the heroes. They are team members or managers that take on most of the political burden for the team on one or many subjects. These people are the glue between each of the functional silos. These people talk to designers, developers, and testers day after day and really keep the trains arriving on time. Most of the cross functional communication is facilitated by these hero figures. The downside to being so dependent on heroes is that without these people, the project would halt. These are the only people that have a consistent view of everything that is happening in their function. Moving to an agile process means that the silos in your process will be removed and there should never be a need for one person to be responsible for communication between the team members. The people who were once the heroes are free to develop or if a manager, remove roadblocks that are raised by the team as needed. The team and the stakeholders will not be comfortable breaking their dependence on this figure. Team members would have to assert themselves more and the business would have to trust them to make the right decisions but a process dependent on anything less the whole team is not agile. The change needs to happen slowly with each member of the team pitching in on something outside of their area of expertise. I know it is easy to let the heroes keep doing all of their magic behind the scenes, but everybody will benefit by learning what they do and simply getting involved. 


Leading by example 

Influencing your team towards agile requires practicing agile as much as possible in your own process. When teammates realize that there is something different about the way that you work they will take notice. Your co-workers may be shocked by a team member that only put in 8 hours work a day. They may think that spending time on unit-testing is taking away from hours that can be spent coding. These actions have a direct and positive effect on the quality of your code and the level of creativity you put into your decisions but results are far from immediate. Your co-workers may feel that if they don't burn the midnight oil every night the project will fail. This is unsustainable because as they work later they make fewer good decisions and extend the time it will take to write code that is free of bugs and ready to be used by customers. Ideally, this will give you an opportunity to show the difference in your results and the results of your  teammates that have been coding on a treadmill set at top speed for two weeks straight. Priorities can change throughout the sprint so make sure your priorities are reassessed by your product owner or project manager before taking on your next task. 

Leave room for failure and be ready to take responsibility when you make a mistake. If the idea is to get peoples attention with your success, you have to be prepared to get more attention with your failures. If you make a mistake it is important to immediately take responsibility for it and work as quickly as possible to resolve it. Yes, failing gracefully can be as much a selling point as winning. There is no avoiding mistakes during a project but having the intellectual bandwidth to respond quickly with a resolution is a positive benefit on working at a sustainable pace. 

Your co-workers and you will most likely have made the same amount of progress in the same amount of time but the difference in quality will be evident. It is important at each step to be open about your process. People need to see that your successes are not luck but calculated moves. Respectfully discuss how to incorporate your changes of process into the team. If your success is noticed by the team and especially the business, people will want to be involved. You need to consistently be ready to hear other peoples opinions and be ready to use their input to evolve your process into something that everybody will use. Make sure that you are humble because nobody wants to work with a process that has no use for their experience. 


Just keep at it 

Progress will take time and it is difficult to know exactly what success will be and when it will happen. Sometimes you will fall into bad habits and get discouraged with the organization. Maybe the business just does not want to stop expecting more in less time. It is inevitable to become discouraged. In my experience discouragement comes before some of by greatest moments of progress. Just keep executing against the most important of your goals so that your successes can have the impact you need to stay motivated. An agile process may never be in the cards for your team but that is not the point. What you want it to enjoy what you do and produce the best results possible. Staying focused on the most appropriate tenets of agile are a great way to make sure your project and you personally develop in the right way.  


This work is licensed under the Creative Commons Attribution-Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us/ or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
